const User = require("../models/userModel.js");
const bcrypt = require("bcryptjs");
const JWT = require("jsonwebtoken");
const KEY = process.env.SECRET_KEY;
exports.handleSignup = async (req, res) => {
  try {
    const { username, email, pass } = req.body;

    // Check if email and password are provided
    if (!email || !pass || !username) {
      return res.status(400).json("All input not found in request");
    }

    const existingUser = await User.findOne({ email: email });
    if (existingUser) {
      return res.status(409).json("Email already in use");
    }

    const hashedPass = await bcrypt.hash(pass, 10);
    const newUser = new User({
      username: username,
      password: hashedPass,
      email: email,
    });

    await newUser.save();
    const token = JWT.sign({ email }, KEY, { expiresIn: "6h" });
    res.status(201).json({ message: "Login successful", token });
  } catch (error) {
    res.status(500).send(error.message);
  }
};

exports.handleLogin = async (req, res) => {
  try {
    const { email, pass } = req.body;

    // Validate input
    if (!email || !pass) {
      return res
        .status(400)
        .json({ error: "Email or password not found in request" });
    }

    // Find user
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }

    // Verify password
    const validPassword = await bcrypt.compare(pass, user.password);
    if (!validPassword) {
      return res.status(401).json({ error: "Incorrect password" });
    }

    // Generate JWT
    const token = JWT.sign({ email }, KEY, { expiresIn: "6h" });

    // Send response with token
    res.status(200).json({ message: "Login successful", token });
  } catch (error) {
    console.error(error); // Optional: log the error for debugging
    res.status(500).json({ error: error.message });
  }
};

exports.handleVerify = async (req, res) => {
  res.status(200).send({ message: "successfully verified" });
};

exports.handleUserData = async (req, res) => {
  try {
    const email = req.user.email;
    const user = await User.findOne({ email: email });
    if (!user) {
      return res.status(404).json({ error: "User not found" });
    }
    res.status(200).json(user);
  } catch (error) {
    console.error(error); // Optional: log the error for debugging
    res.status(500).json({ error: error.message });
  }
};
